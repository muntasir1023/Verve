Chat container HTML (to be inserted inside <body> before footer):

<main class="chat-container">
  <div class="chat-header">
    <h1>Travel Support Chat</h1>
    <div class="chat-status">
      <span class="status-dot"></span>
      <span>Online</span>
    </div>
  </div>
  
  <div class="chat-messages" id="chatMessages">
    <!-- Messages will appear here -->
    <div class="message system">
      <p>Welcome to Travel Agency support! How can we help you today?</p>
      <span class="timestamp">Just now</span>
    </div>
  </div>
  
  <div class="chat-input">
    <div class="attachment-options">
      <button class="attach-btn" id="attachFile" title="Attach file">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
        </svg>
      </button>
      <button class="attach-btn" id="attachPhoto" title="Attach photo">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          <circle cx="8.5" cy="8.5" r="1.5"></circle>
          <polyline points="21 15 16 10 5 21"></polyline>
        </svg>
      </button>
      <input type="file" id="fileInput" accept=".pdf,.doc,.docx,.txt" style="display: none;">
      <input type="file" id="imageInput" accept="image/*" style="display: none;">
    </div>
    
    <textarea id="messageInput" placeholder="Type your message here..." rows="2"></textarea>
    <button id="sendMessage">Send</button>
    
    <div class="preview-area" id="previewArea"></div>
  </div>
</main>

Chat styles (to be appended inside <style> tag in <head>):

/* Chat System Styles */
.chat-container {
  max-width: 800px;
  margin: 2rem auto;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  overflow: hidden;
  background-color: white;
}

.chat-header {
  background-color: #f27c3c;
  color: white;
  padding: 1rem 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-header h1 {
  margin: 0;
  font-size: 1.5rem;
  border-left: none;
  padding-left: 0;
}

.chat-status {
  display: flex;
  align-items: center;
  font-size: 0.9rem;
}

.status-dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: #4caf50;
  margin-right: 8px;
}

.chat-messages {
  height: 400px;
  overflow-y: auto;
  padding: 1.5rem;
  background-color: #f9f9f9;
}

.message {
  margin-bottom: 1rem;
  max-width: 70%;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  position: relative;
}

.message.user {
  background-color: #f27c3c;
  color: white;
  margin-left: auto;
  border-bottom-right-radius: 4px;
}

.message.agent {
  background-color: #e0e0e0;
  margin-right: auto;
  border-bottom-left-radius: 4px;
}

.message.system {
  background-color: #f5f5f5;
  margin: 0 auto 1rem;
  text-align: center;
  max-width: 90%;
  border-radius: 8px;
  color: #666;
}

.timestamp {
  display: block;
  font-size: 0.7rem;
  margin-top: 4px;
  opacity: 0.8;
}

.message.user .timestamp {
  text-align: right;
  color: rgba(255,255,255,0.8);
}

.message.agent .timestamp {
  text-align: left;
  color: rgba(0,0,0,0.6);
}

.chat-input {
  padding: 1rem;
  border-top: 1px solid #eee;
  background-color: white;
}

.attachment-options {
  display: flex;
  gap: 8px;
  margin-bottom: 8px;
}

.attach-btn {
  background: none;
  border: none;
  cursor: pointer;
  color: #666;
  padding: 6px;
  border-radius: 50%;
  transition: all 0.2s;
}

.attach-btn:hover {
  background-color: #f0f0f0;
  color: #f27c3c;
}

.attach-btn svg {
  width: 20px;
  height: 20px;
}

#messageInput {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  resize: none;
  font-family: inherit;
  margin-bottom: 8px;
}

#messageInput:focus {
  outline: none;
  border-color: #f27c3c;
  box-shadow: 0 0 0 2px rgba(242, 124, 60, 0.2);
}

#sendMessage {
  background-color: #f27c3c;
  color: white;
  border: none;
  padding: 0.5rem 1.5rem;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.2s;
}

#sendMessage:hover {
  background-color: #e56612;
}

.preview-area {
  margin-top: 1rem;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.attachment-preview {
  position: relative;
  width: 100px;
  height: 100px;
  border-radius: 8px;
  overflow: hidden;
  background-color: #f5f5f5;
}

.attachment-preview img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.attachment-preview .file-icon {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: #666;
}

.attachment-preview .remove-btn {
  position: absolute;
  top: 4px;
  right: 4px;
  background-color: rgba(0,0,0,0.5);
  color: white;
  border: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 12px;
}

/* Responsive styles */
@media (max-width: 768px) {
  .chat-container {
    margin: 0;
    border-radius: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  .chat-messages {
    flex-grow: 1;
    height: auto;
  }
}

Chat JavaScript (to be appended before </body>):

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendMessage');
    const attachFileBtn = document.getElementById('attachFile');
    const attachPhotoBtn = document.getElementById('attachPhoto');
    const fileInput = document.getElementById('fileInput');
    const imageInput = document.getElementById('imageInput');
    const previewArea = document.getElementById('previewArea');
    
    let attachments = [];
    
    // Scroll to bottom of chat
    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Add a message to the chat
    function addMessage(text, sender, timestamp = new Date()) {
      const messageDiv = document.createElement('div');
      messageDiv.classList.add('message', sender);
      
      const messageText = document.createElement('p');
      messageText.textContent = text;
      
      const timeSpan = document.createElement('span');
      timeSpan.classList.add('timestamp');
      timeSpan.textContent = formatTime(timestamp);
      
      messageDiv.appendChild(messageText);
      messageDiv.appendChild(timeSpan);
      chatMessages.appendChild(messageDiv);
      
      scrollToBottom();
    }
    
    // Format time for display
    function formatTime(date) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // Handle sending messages
    function sendMessage() {
      const text = messageInput.value.trim();
      if (text || attachments.length > 0) {
        addMessage(text, 'user');
        
        // In a real app, you would send this to your server
        // For demo, we'll simulate a response after a delay
        setTimeout(() => {
          addMessage("Thanks for your message! Our team will get back to you shortly.", 'agent');
        }, 1000);
        
        // Clear input and attachments
        messageInput.value = '';
        clearAttachments();
      }
    }
    
    // Handle file attachments
    function handleFileUpload(files) {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        attachments.push(file);
        createAttachmentPreview(file);
      }
    }
    
    // Create preview for an attachment
    function createAttachmentPreview(file) {
      const previewDiv = document.createElement('div');
      previewDiv.classList.add('attachment-preview');
      
      const removeBtn = document.createElement('button');
      removeBtn.classList.add('remove-btn');
      removeBtn.innerHTML = '&times;';
      removeBtn.addEventListener('click', () => removeAttachment(file));
      
      if (file.type.startsWith('image/')) {
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        previewDiv.appendChild(img);
      } else {
        const fileIcon = document.createElement('div');
        fileIcon.classList.add('file-icon');
        fileIcon.innerHTML = `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
            <polyline points="13 2 13 9 20 9"></polyline>
          </svg>
          <span>${file.name}</span>
        `;
        previewDiv.appendChild(fileIcon);
      }
      
      previewDiv.appendChild(removeBtn);
      previewArea.appendChild(previewDiv);
    }
    
    // Remove an attachment
    function removeAttachment(file) {
      attachments = attachments.filter(f => f !== file);
      const previews = Array.from(previewArea.children);
      const previewToRemove = previews.find(p => 
        p.querySelector('img')?.src === URL.createObjectURL(file) || 
        p.textContent.includes(file.name)
      );
      if (previewToRemove) {
        previewArea.removeChild(previewToRemove);
      }
    }
    
    // Clear all attachments
    function clearAttachments() {
      attachments = [];
      previewArea.innerHTML = '';
    }
    
    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    
    messageInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
    
    attachFileBtn.addEventListener('click', function() {
      fileInput.click();
    });
    
    attachPhotoBtn.addEventListener('click', function() {
      imageInput.click();
    });
    
    fileInput.addEventListener('change', function() {
      handleFileUpload(this.files);
      this.value = ''; // Reset input
    });
    
    imageInput.addEventListener('change', function() {
      handleFileUpload(this.files);
      this.value = ''; // Reset input
    });
    
    // Initial scroll to bottom
    scrollToBottom();
  });
</script>
